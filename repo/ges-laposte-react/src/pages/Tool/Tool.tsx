import React, { useState, useEffect } from 'react';
import { useAppContext } from '../../contexts/AppContext';
import CategorySelector from '../../components/CategorySelector/CategorySelector';
import CategoryForm from '../../components/CategoryForm/CategoryForm';
import { EmissionCategory } from '../../config/constants';
import './Tool.css';

const Tool: React.FC = () => {
  const { state, saveFormData } = useAppContext();
  const [activeCategory, setActiveCategory] = useState<EmissionCategory | null>(null);
  const [showResults, setShowResults] = useState(false);

  const categories = [
    { id: 'batiments', name: 'B√¢timents', icon: 'üè¢', description: 'Consommation √©nerg√©tique des b√¢timents' },
    { id: 'flotte-propre', name: 'Flotte en propre', icon: 'üöö', description: 'V√©hicules appartenant √† La Poste' },
    { id: 'transport-sous-traite', name: 'Transport sous-trait√©', icon: 'üì¶', description: 'Transport externalis√©' },
    { id: 'deplacements-domicile', name: 'D√©placements domicile-travail', icon: 'üè†', description: 'Trajets des collaborateurs' },
    { id: 'deplacements-professionnels', name: 'D√©placements professionnels', icon: '‚úàÔ∏è', description: 'Missions et d√©placements pro' },
    { id: 'frequentation', name: 'Fr√©quentation', icon: 'üë•', description: 'Clients et collaborateurs' },
    { id: 'alimentation', name: 'Alimentation', icon: 'üçΩÔ∏è', description: 'Restauration collective' },
    { id: 'achats', name: 'Achats', icon: 'üõí', description: 'Achats et consommables' },
    { id: 'dechets', name: 'D√©chets', icon: '‚ôªÔ∏è', description: 'Gestion des d√©chets' }
  ];

  const handleCategorySelect = (categoryId: string) => {
    setActiveCategory(categoryId as EmissionCategory);
  };

  const handleFormSubmit = (data: any) => {
    saveFormData({ [activeCategory!]: data });
    setActiveCategory(null);
  };

  const handleCalculate = () => {
    // Calculer les √©missions totales
    setShowResults(true);
  };

  return (
    <main className="main-container tool-page">
      <div className="tool-header">
        <h1>Calculateur Bilan GES</h1>
        <p className="tool-subtitle">
          S√©lectionnez les cat√©gories d'√©missions pertinentes pour votre entit√©
        </p>
      </div>

      {!activeCategory && !showResults && (
        <>
          <div className="categories-grid">
            {categories.map((category) => (
              <CategorySelector
                key={category.id}
                category={category}
                isSelected={state.forms.selectedCategories.has(category.id as EmissionCategory)}
                onClick={() => handleCategorySelect(category.id)}
              />
            ))}
          </div>

          {state.forms.selectedCategories.size > 0 && (
            <div className="actions-section">
              <button 
                className="cta-button primary"
                onClick={handleCalculate}
              >
                üìä Calculer les √©missions
              </button>
            </div>
          )}
        </>
      )}

      {activeCategory && (
        <CategoryForm
          category={activeCategory}
          onSubmit={handleFormSubmit}
          onCancel={() => setActiveCategory(null)}
          initialData={state.forms.formData[activeCategory]}
        />
      )}

      {showResults && (
        <div className="results-preview">
          <h2>R√©sultats pr√©liminaires</h2>
          <div className="results-summary">
            <div className="result-card">
              <h3>Total des √©missions</h3>
              <p className="result-value">
                {calculateTotalEmissions(state.forms.formData)} tCO2e
              </p>
            </div>
          </div>
          <div className="results-actions">
            <button 
              className="cta-button secondary"
              onClick={() => setShowResults(false)}
            >
              ‚Üê Retour aux cat√©gories
            </button>
            <a href="/resultats" className="cta-button primary">
              Voir les r√©sultats d√©taill√©s ‚Üí
            </a>
          </div>
        </div>
      )}
    </main>
  );
};

// Fonction de calcul simplifi√©
function calculateTotalEmissions(formData: any): string {
  // Logique de calcul √† impl√©menter selon les facteurs d'√©mission
  let total = 0;
  
  // Exemple de calcul simplifi√©
  Object.values(formData).forEach((categoryData: any) => {
    if (typeof categoryData === 'object') {
      Object.values(categoryData).forEach((value: any) => {
        if (typeof value === 'number') {
          total += value * 0.001; // Facteur d'√©mission exemple
        }
      });
    }
  });
  
  return total.toFixed(2);
}

export default Tool;